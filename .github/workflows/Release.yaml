name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version_full: ${{ steps.version.outputs.full }}
    steps:
      - name: Check tag version
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Version tag only step
        run: |
          echo "Found valid version format in tag!"
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Major version: ${{ steps.version.outputs.major }}"
          echo "Major with pre-release: ${{ steps.version.outputs.major_prerelease }}"
        if: steps.version.outputs.is_valid == 'true'
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Check VERSION file sameness
        id: check_version_file
        run: |
          echo "Checking if VERSION file matches tag version..."
          if [ "$(cat VERSION)" != "${{ steps.version.outputs.full }}" ]; then
            echo "VERSION file does not match tag version!"
            exit 1
          fi
          echo "VERSION file matches tag version!"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: ${{ steps.version.outputs.is_stable == 'false' }}

  pyinstaller-build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.3.0
        with:
          python_ver: '3.12.7'
          cache: 'true'
          spec: 'build.spec'
          requirements: 'requirements.txt'

      # - name: Install libfuse2 compat
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libfuse2 || sudo apt-get install -y libfuse2t64
      
      - name: Build AppImage
        run: |
            PYI_OUTPUT_DIR="${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager"

            # Layout
            mkdir -p AppDir/usr/bin AppDir/usr/lib/edcm AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps

            # Copy your PyInstaller onedir
            cp -r "$PYI_OUTPUT_DIR/." AppDir/usr/lib/edcm/

            # Launcher
            cat > AppDir/usr/bin/edcm <<'EOF'
            #!/bin/sh
            HERE="$(dirname "$(readlink -f "$0")")"
            exec "$HERE/../lib/edcm/Elite Dangerous Carrier Manager" "$@"
            EOF
            chmod +x AppDir/usr/bin/edcm

            # Desktop file
            cat > AppDir/usr/share/applications/edcm.desktop <<'EOF'
            [Desktop Entry]
            Type=Application
            Name=Elite Dangerous Carrier Manager
            Exec=edcm
            Icon=edcm
            Categories=Game;Utility;
            Terminal=false
            EOF

            # Icon (replace path if yours lives elsewhere)
            cp "$PYI_OUTPUT_DIR/_internal/images/EDCM.png" AppDir/usr/share/icons/hicolor/256x256/apps/edcm.png

            # Copy to AppDir root so appimagetool sees them
            cp AppDir/usr/share/applications/edcm.desktop AppDir/edcm.desktop
            cp AppDir/usr/share/icons/hicolor/256x256/apps/edcm.png AppDir/edcm.png

            # Quick sanity check
            [ -f AppDir/edcm.desktop ] || { echo "missing desktop"; exit 1; }
            [ -f AppDir/edcm.png ]     || { echo "missing icon"; exit 1; }
            [ -x AppDir/usr/bin/edcm ] || { echo "missing launcher"; exit 1; }

            # AppRun points to your launcher
            ln -sf usr/bin/edcm AppDir/AppRun

            # Get appimagetool and run it WITHOUT FUSE
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage
            ./appimagetool-x86_64.AppImage --appimage-extract

            VER="${{ needs.create-release.outputs.version_full }}"
            UPDATE_INFO="gh-releases-zsync|${{ github.repository_owner }}|${{ github.event.repository.name }}|latest|EDCM-*x86_64.AppImage.zsync"
            ./squashfs-root/AppRun -u "$UPDATE_INFO" AppDir "EDCM-${VER}-x86_64.AppImage"

            ls -l
      
      - name: Verify AppImage outputs
        run: |
          ls -l
          test -f "EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage"
          test -f "EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage.zsync" || {
            echo "Missing .zsync â€” did you embed update info with appimagetool -u?"
            exit 1
          }

      
      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage
            EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage.zsync


      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage
          asset_name: EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload AppImage zsync
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage.zsync
          asset_name: EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage.zsync
          asset_content_type: application/octet-stream


      - name: Upload Linux Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-linux
          path: ${{ steps.attestation.outputs.bundle-path }}

  pyinstaller-build:
    runs-on: windows-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.3.0
        with:
          python_ver: '3.12.7'
          cache: 'true'
          spec: 'build.spec'
          requirements: 'requirements.txt'
      
      - name: Show PyInstaller onedir path (debug)
        shell: cmd
        run: |
          echo exe path: ${{ steps.create_executable.outputs.executable_path }}
          dir "${{ steps.create_executable.outputs.executable_path }}\Elite Dangerous Carrier Manager"
          echo "The repository is located at: ${{ github.workspace }}"
          ls -l ${{ github.workspace }}

      - name: Verify paths for Inno
        shell: cmd
        run: |
          echo INPUT_DIR="${{ github.workspace }}\dist\Elite Dangerous Carrier Manager"
          if exist "${{ github.workspace }}\dist\Elite Dangerous Carrier Manager" (echo onedir OK) else (echo MISSING & exit /b 1)
          if exist "${{ github.workspace }}\installer\setup.iss" (echo onedir OK) else (echo MISSING & exit /b 1)
          if not exist "${{ github.workspace }}\installer\dist" mkdir "${{ github.workspace }}\installer\dist"

      # - name: Install Inno Setup
      #   run: choco install innosetup -y

      # - name: Compile installer (manual ISCC)
      #   shell: cmd
      #   working-directory: ${{ github.workspace }}
      #   run: |
      #     "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ^
      #       /DAPP_VERSION=${{ needs.create-release.outputs.version_full }} ^
      #       /DINPUT_DIR="${{ github.workspace }}\dist\Elite Dangerous Carrier Manager" ^
      #       /DOUTPUT_DIR="${{ github.workspace }}\installer\dist" ^
      #       installer\setup.iss


      - name: Build Windows Installer (Inno Setup)
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.7
        with:
          path: \installer\setup.iss
          options: /O+
        env:
          APP_VERSION: ${{ needs.create-release.outputs.version_full }}
          INPUT_DIR: "${{ github.workspace }}\\dist\\Elite Dangerous Carrier Manager"
          OUTPUT_DIR: "${{ github.workspace }}\\installer\\dist"

      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ github.workspace }}\installer\dist\EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\installer\dist\EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe
          asset_name: EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Windows Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-windows
          path: ${{ steps.attestation.outputs.bundle-path }}

  combine-attestations:
    runs-on: ubuntu-latest
    needs: [create-release, pyinstaller-build-linux, pyinstaller-build]
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Download Linux Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-linux
          path: ./attestations/linux

      - name: Download Windows Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-windows
          path: ./attestations/windows

      - name: Combine Attestations
        run: |
          jq -s '.[0] * .[1]' ./attestations/linux/attestation.json ./attestations/windows/attestation.json > combined-attestation.json

      - name: Upload Combined Attestation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./combined-attestation.json
          asset_name: attestation.json
          asset_content_type: application/json