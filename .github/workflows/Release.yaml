name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version_full: ${{ steps.version.outputs.full }}
    steps:
      - name: Check tag version
        uses: nowsprinting/check-version-format-action@v3
        id: version
        with:
          prefix: 'v'

      - name: Version tag only step
        run: |
          echo "Found valid version format in tag!"
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Major version: ${{ steps.version.outputs.major }}"
          echo "Major with pre-release: ${{ steps.version.outputs.major_prerelease }}"
        if: steps.version.outputs.is_valid == 'true'
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Check VERSION file sameness
        id: check_version_file
        run: |
          echo "Checking if VERSION file matches tag version..."
          if [ "$(cat VERSION)" != "${{ steps.version.outputs.full }}" ]; then
            echo "VERSION file does not match tag version!"
            exit 1
          fi
          echo "VERSION file matches tag version!"
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: ${{ steps.version.outputs.is_stable == 'false' }}

  pyinstaller-build-linux:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.3.0
        with:
          python_ver: '3.12.7'
          cache: 'true'
          spec: 'build.spec'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'EDCM-Linux'

      - name: Build AppImage
        run: |
          # Paths from your existing PyInstaller step
          PYI_OUTPUT_DIR="${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager"

          # Layout an AppDir
          mkdir -p AppDir/usr/bin AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps

          # Place the onedir tree in the AppDir
          mkdir -p AppDir/usr/lib/edcm AppDir/usr/bin
          cp -r "${PYI_OUTPUT_DIR}/" AppDir/usr/lib/edcm/

          # Launcher that runs your binary from that folder
          cat > AppDir/usr/bin/edcm <<'EOF'
          #!/bin/sh
          HERE="$(dirname "$(readlink -f "$0")")"
          exec "$HERE/../lib/edcm/Elite Dangerous Carrier Manager" "$@"
          EOF
          chmod +x AppDir/usr/bin/edcm

          # Desktop file (shows up in menus/launchers)
          cat > AppDir/usr/share/applications/edcm.desktop <<'EOF'
          [Desktop Entry]
          Type=Application
          Name=Elite Dangerous Carrier Manager
          Exec=edcm
          Icon=edcm
          Categories=Game;Utility;
          Terminal=false
          EOF

          # Icon (replace with your real path)
          cp "${PYI_OUTPUT_DIR}/_internal/images/EDCM.png" AppDir/usr/share/icons/hicolor/256x256/apps/edcm.png

          # Get linuxdeploy + AppImage plugin
          wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage
          chmod +x linuxdeploy-*.AppImage

          # Version + embedded update info for GitHub Releases (delta updates via zsync)
          export VERSION="${{ needs.create-release.outputs.version_full }}"
          export UPDATE_INFORMATION="gh-releases-zsync|${{ github.repository_owner }}|${{ github.event.repository.name }}|latest|EDCM-x86_64.AppImage.zsync"

          # Build the AppImage (also emits .zsync when UPDATE_INFORMATION is set)
          ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage

          # Rename for clarity
          mv EDCM*.AppImage EDCM-x86_64.AppImage || true
          ls -l
      
      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: EDCM-x86_64.AppImage, EDCM-x86_64.AppImage.zsync

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: EDCM-x86_64.AppImage
          asset_name: EDCM-${{ needs.create-release.outputs.version_full }}-x86_64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload AppImage zsync (delta updates)
        if: hashFiles('*.zsync') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: EDCM-x86_64.AppImage.zsync
          asset_name: EDCM-x86_64.AppImage.zsync
          asset_content_type: application/octet-stream

      - name: Upload Linux Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-linux
          path: ${{ steps.attestation.outputs.bundle-path }}

  pyinstaller-build:
    runs-on: windows-latest
    needs: create-release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Create Executable
        id: create_executable
        uses: skywalkerctu/pyinstaller-action@v1.3.0
        with:
          python_ver: '3.12.7'
          cache: 'true'
          spec: 'build.spec'
          requirements: 'requirements.txt'
          upload_exe_with_name: 'EDCM'
      - name: Build Windows Installer (Inno Setup)
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        env:
          DAPP_VERSION: ${{ needs.create-release.outputs.version_full }} 
          DINPUT_DIR: ${{ steps.create_executable.outputs.executable_path }}/Elite Dangerous Carrier Manager
        with:
          path: .\installer\setup_local.iss

      - name: Generate artifact attestation
        id: attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: dist/installer/EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/installer/EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe
          asset_name: EDCM-Setup-${{ needs.create-release.outputs.version_full }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Windows Attestation as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: attestation-windows
          path: ${{ steps.attestation.outputs.bundle-path }}

  combine-attestations:
    runs-on: ubuntu-latest
    needs: [create-release, pyinstaller-build-linux, pyinstaller-build]
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      attestations: write
    steps:
      - name: Download Linux Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-linux
          path: ./attestations/linux

      - name: Download Windows Executable Attestation
        uses: actions/download-artifact@v4
        with:
          name: attestation-windows
          path: ./attestations/windows

      - name: Combine Attestations
        run: |
          jq -s '.[0] * .[1]' ./attestations/linux/attestation.json ./attestations/windows/attestation.json > combined-attestation.json

      - name: Upload Combined Attestation
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./combined-attestation.json
          asset_name: attestation.json
          asset_content_type: application/json